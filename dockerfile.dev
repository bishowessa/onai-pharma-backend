# ---- Base Stage ----
# Use an official Node.js runtime as a parent image
FROM node:18-alpine AS base
WORKDIR /usr/src/app

# ---- Dependencies Stage ----
# Install dependencies first to leverage Docker cache
FROM base AS deps
COPY package.json package-lock.json* ./
RUN npm ci

# ---- Build Stage ----
# If you have a build step (e.g., for TypeScript)
FROM base AS build
COPY --from=deps /usr/src/app/node_modules ./node_modules
COPY . .
# Replace this with your actual build command if you have one
# RUN npm run build

# ---- Production Stage ----
# Create the final, lean image
FROM base AS final
ENV NODE_ENV=production
# Copy dependencies
COPY --from=deps /usr/src/app/node_modules ./node_modules
# Copy application code (or built code from the 'build' stage)
COPY . .
# If you have a build step, uncomment the line below and adjust the path
# COPY --from=build /usr/src/app/dist ./dist

# Expose the port the app runs on
EXPOSE 3000

# The command to run your application, based on your package.json
CMD [ "node", "index.js" ]
